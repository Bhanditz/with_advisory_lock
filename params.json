{"name":"With advisory lock","tagline":"Advisory locking for ActiveRecord","body":"# with_advisory_lock\r\n\r\nAdds advisory locking (mutexes) to ActiveRecord 3.2, 4.0 and 4.1 when used with\r\n[MySQL](http://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_get-lock)\r\nor [PostgreSQL](http://www.postgresql.org/docs/9.3/static/functions-admin.html#FUNCTIONS-ADVISORY-LOCKS).\r\nSQLite resorts to file locking.\r\n\r\n[![Build Status](https://api.travis-ci.org/mceachen/with_advisory_lock.png?branch=master)](https://travis-ci.org/mceachen/with_advisory_lock)\r\n[![Gem Version](https://badge.fury.io/rb/with_advisory_lock.png)](http://rubygems.org/gems/with_advisory_lock)\r\n[![Code Climate](https://codeclimate.com/github/mceachen/with_advisory_lock.png)](https://codeclimate.com/github/mceachen/with_advisory_lock)\r\n[![Dependency Status](https://gemnasium.com/mceachen/with_advisory_lock.png)](https://gemnasium.com/mceachen/with_advisory_lock)\r\n\r\n## What's an \"Advisory Lock\"?\r\n\r\nAn advisory lock is a [mutex](http://en.wikipedia.org/wiki/Mutual_exclusion) used to ensure no two\r\nprocesses run some process at the same time. When the advisory lock is powered by your database\r\nserver, as long as it isn't SQLite, your mutex spans hosts.\r\n\r\n## Usage\r\n\r\nWhere ```User``` is an ActiveRecord model, and ```lock_name``` is some string:\r\n\r\n```ruby\r\nUser.with_advisory_lock(lock_name) do\r\n  do_something_that_needs_locking\r\nend\r\n```\r\n\r\n### What happens\r\n\r\n1. The thread will wait indefinitely until the lock is acquired.\r\n2. While inside the block, you will exclusively own the advisory lock.\r\n3. The lock will be released after your block ends, even if an exception is raised in the block.\r\n\r\n### Lock wait timeouts\r\n\r\nThe second parameter for ```with_advisory_lock``` is ```timeout_seconds```, and defaults to ```nil```,\r\nwhich means wait indefinitely for the lock.\r\n\r\nA value of zero will try the lock only once. If the lock is acquired, the block\r\nwill be yielded to. If the lock is currently being held, the block will not be called.\r\n\r\nNote that if a non-nil value is provided for `timeout_seconds`, the block will not be invoked if\r\nthe lock cannot be acquired within that timeframe.\r\n\r\n### Return values\r\n \r\nThe return value of ```with_advisory_lock``` will be the result of the yielded block,\r\nif the lock was able to be acquired and the block yielded, or ```false```, if you provided\r\na timeout_seconds value and the lock was not able to be acquired in time.\r\n\r\n### Testing for the current lock status\r\n\r\nIf you needed to check if the advisory lock is currently being held, you can call\r\n```Tag.advisory_lock_exists?(\"foo\")```, but realize the lock can be acquired between the time you\r\ntest for the lock, and the time you try to acquire the lock.\r\n\r\nIf you want to see if the current Thread is holding a lock, you can call ```Tag.current_advisory_lock```\r\nwhich will return the name of the current lock. If no lock is currently held,\r\n```.current_advisory_lock``` returns ```nil```.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n``` ruby\r\ngem 'with_advisory_lock'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\n## Lock Types\r\n\r\nFirst off, know that there are **lots** of different kinds of locks available to you. **Pick the\r\nfinest-grain lock that ensures correctness.** If you choose a lock that is too coarse, you are\r\nunnecessarily blocking other processes.\r\n\r\n### Advisory locks\r\nThese are named mutexes that are inherently \"application level\"—it is up to the application\r\nto acquire, run a critical code section, and release the advisory lock.\r\n\r\n### Row-level locks\r\nWhether [optimistic](http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html)\r\nor [pessimistic](http://api.rubyonrails.org/classes/ActiveRecord/Locking/Pessimistic.html),\r\nrow-level locks prevent concurrent modification to a given model.\r\n\r\n**If you're building a\r\n[CRUD](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete) application, this will be your\r\nmost commonly used lock.**\r\n\r\n### Table-level locks\r\n\r\nProvided through something like the [monogamy](https://github.com/mceachen/monogamy)\r\ngem, these prevent concurrent access to **any instance of a model**. Their coarseness means they\r\naren't going to be commonly applicable, and they can be a source of\r\n[deadlocks](http://en.wikipedia.org/wiki/Deadlock).\r\n\r\n## FAQ\r\n\r\n### Transactions and Advisory Locks\r\n\r\nAdvisory locks with MySQL and PostgreSQL ignore database transaction boundaries.\r\n\r\nYou will want to wrap your block within a transaction to ensure consistency.\r\n\r\n### MySQL doesn't support nesting\r\n\r\nWith MySQL (at least <= v5.5), if you ask for a *different* advisory lock within a ```with_advisory_lock``` block,\r\nyou will be releasing the parent lock (!!!). A ```NestedAdvisoryLockError```will be raised\r\nin this case. If you ask for the same lock name, ```with_advisory_lock``` won't ask for the\r\nlock again, and the block given will be yielded to.\r\n\r\n### There are many ```lock-*``` files in my project directory after test runs\r\n\r\nThis is expected if you aren't using MySQL or Postgresql for your tests.\r\nSee [issue 3](https://github.com/mceachen/with_advisory_lock/issues/3).\r\n\r\nSQLite doesn't have advisory locks, so we resort to file locking, which will only work\r\nif the ```FLOCK_DIR``` is set consistently for all ruby processes.\r\n\r\nIn your ```spec_helper.rb``` or ```minitest_helper.rb```, add a ```before``` and ```after``` block:\r\n\r\n```ruby\r\nbefore do\r\n  ENV['FLOCK_DIR'] = Dir.mktmpdir\r\nend\r\n\r\nafter do\r\n  FileUtils.remove_entry_secure ENV['FLOCK_DIR']\r\nend\r\n```\r\n\r\n## Changelog\r\n\r\n### 2.0.0\r\n\r\n* Lock timeouts of 0 now attempt the lock once, as per suggested by \r\n  [Jon Leighton](https://github.com/jonleighton) and implemented by \r\n  [Abdelkader Boudih](https://github.com/seuros). Thanks to both of you!\r\n* [Pull request 11](https://github.com/mceachen/with_advisory_lock/pull/11) \r\n  fixed a downstream issue with jruby support! Thanks, [Aaron Todd](https://github.com/ozzyaaron)!\r\n* Added Travis tests for jruby\r\n* Dropped support for Rails 3.0, 3.1, and Ruby 1.8.7, as they are no longer\r\n  receiving security patches. See http://rubyonrails.org/security/ for more information. \r\n  This required the major version bump.\r\n* Refactored `advisory_lock_exists?` to use existing functionality\r\n* Fixed sqlite's implementation so parallel tests could be run against it \r\n\r\n### 1.0.0\r\n\r\n* Releasing 1.0.0. The interface will be stable.\r\n* Added ```advisory_lock_exists?```. Thanks, [Sean Devine](https://github.com/barelyknown), for the\r\n  great pull request!\r\n* Added Travis test for Rails 4.1\r\n\r\n### 0.0.10\r\n\r\n* Explicitly added MIT licensing to the gemspec.\r\n\r\n### 0.0.9\r\n\r\n* Merged in Postgis Adapter Support to address [issue 7](https://github.com/mceachen/with_advisory_lock/issues/7)\r\n  Thanks for the pull request, [Abdelkader Boudih](https://github.com/seuros)!\r\n* The database switching code had to be duplicated by [Closure Tree](https://github.com/mceachen/closure_tree),\r\n  so I extracted a new ```WithAdvisoryLock::DatabaseAdapterSupport``` one-trick pony.\r\n* Builds were failing on Travis, so I introduced a global lock prefix that can be set with the\r\n  ```WITH_ADVISORY_LOCK_PREFIX``` environment variable. I'm not going to advertise this feature yet.\r\n  It's a secret. Only you and I know, now. *shhh*\r\n\r\n### 0.0.8\r\n\r\n* Addressed [issue 5](https://github.com/mceachen/with_advisory_lock/issues/5) by\r\n  using a deterministic hash for Postgresql + MRI >= 1.9.\r\n  Thanks for the pull request, [Joel Turkel](https://github.com/jturkel)!\r\n* Addressed [issue 2](https://github.com/mceachen/with_advisory_lock/issues/2) by\r\n  using a cache-busting query for MySQL and Postgres to deal with AR value caching bug.\r\n  Thanks for the pull request, [Jaime Giraldo](https://github.com/sposmen)!\r\n* Addressed [issue 4](https://github.com/mceachen/with_advisory_lock/issues/4) by\r\n  adding support for ```em-postgresql-adapter```.\r\n  Thanks, [lestercsp](https://github.com/lestercsp)!\r\n\r\n(Hey, github—your notifications are WAY too easy to ignore!)\r\n\r\n### 0.0.7\r\n\r\n* Added Travis tests for Rails 3.0, 3.1, 3.2, and 4.0\r\n* Fixed MySQL bug with select_value returning a string instead of an integer when using AR 3.0.x\r\n\r\n### 0.0.6\r\n\r\n* Only require ActiveRecord >= 3.0.x\r\n* Fixed MySQL error reporting\r\n\r\n### 0.0.5\r\n\r\n* Asking for the currently acquired advisory lock doesn't re-ask for the lock now.\r\n* Introduced NestedAdvisoryLockError when asking for different, nested advisory locksMySQL\r\n\r\n### 0.0.4\r\n\r\n* Moved require into on_load, which should speed loading when AR doesn't have to spin up\r\n\r\n### 0.0.3\r\n\r\n* Fought with ActiveRecord 3.0.x and 3.1.x. You don't want them if you use threads—they fail\r\n  predictably.\r\n\r\n### 0.0.2\r\n\r\n* Added warning log message for nested MySQL lock calls\r\n* Randomized lock wait time, which can help ameliorate lock contention\r\n\r\n### 0.0.1\r\n\r\n* First whack\r\n","google":"UA-38750440-1","note":"Don't delete this file! It's used internally to help with page regeneration."}